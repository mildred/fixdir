#!/usr/bin/env tclsh

set files       ""
set verbose     0
set database    ""
set databasedir ""
set installdir  $env(HOME)
set databases   ""

proc db_link {ip a b {c ""}} {
  global files verbose databasedir installdir database databases
  if { $a == "-in" } {
    foreach f $c {
      db_link $ip [file join $b [file tail $f]] $f
    }
  } else {
    set installed [file join $installdir $a]
    set packaged  [file join $databasedir $b]
    dict set files [file dirname $installed] ignore 1
    dict set files $installed link $packaged
    dict set databases $database $installed 1
    if $verbose { puts [list link $installed $packaged] }
  }
}
proc db_copy {ip a b {c ""}} {
  global files verbose databasedir installdir database databases
  if { $a == "-in" } {
    foreach f $c {
      db_copy $ip [file join $b [file tail $f]] $f
    }
  } else {
    set installed [file join $installdir $a]
    set packaged  [file join $databasedir $b]
    dict set files [file dirname $installed] ignore 1
    dict set files $installed copy $packaged
    dict set databases $database $installed 1
    if $verbose { puts [list copy $installed $packaged] }
  }
}
proc db_noisy {ip a} {
  global files verbose installdir database databases
  foreach i $a {
    set installed [file join $installdir $i]
    dict set files $installed noisy 1
    dict set databases $database $installed 1
    if $verbose { puts [list noisy $installed] }
  }
}
proc db_ignore {ip a} {
  global files verbose installdir database databases
  foreach i $a {
    set installed [file join $installdir $i]
    dict set files $installed ignore 1
    dict set databases $database $installed 1
    if $verbose { puts [list ignore $installed] }
  }
}
proc db_database {ip dbfile} {
  global database databasedir installdir verbose files databases
  if [file isdirectory $dbfile] {
    set dbdir  $dbfile
    set dbfile [file join $dbdir ".fixdir"]
    if {! [file isfile $dbfile]} { set dbfile [file join $dbdir "hpkg.tcl"] }
  }
  if {[file isfile $dbfile]} {
    set old_database $database
    set database $dbfile
    set databasedir [file dirname $database]
    if $verbose { puts [list database $installed] }
    interp eval $ip set pkgdir $databasedir
    interp eval $ip set installdir $installdir
    interp eval $ip source $dbfile
    set database $old_database
    set databasedir [file dirname $database]
  }
}

proc read_database {database} {
  set i [interp create]
  interp alias $i link     {} db_link     $i
  interp alias $i copy     {} db_copy     $i
  interp alias $i noisy    {} db_noisy    $i
  interp alias $i ignore   {} db_ignore   $i
  interp alias $i database {} db_database $i
  if { $database == "" } { set database "." }
  db_database $i $database
  return $i
}

proc clean_path {path} {
  set clean ""
  foreach item [file split $path] {
    if {$item == "."} {
      continue
    } elseif {$item == ".."} {
      if {[lindex $clean end] != ".." && [llength $clean]} {
        # remove last element
        set clean [lreplace $clean end end]
      } else {
        lappend clean ".."
      }
    } else {
      lappend clean $item
    }
    return [file join $clean]
  }
}

proc get_link_target {sourcefile target} {
  # Compute path relative to sourcefile that leads to target
  # The sourcefile's directory and the target must exist in the filesystem.
  # Split both paths
  set sourcedir [file split [file normalize [file dirname $sourcefile]]]
  set target    [file split [file normalize $target]]
  # Remove common prefix
  while {  [llength $sourcedir] && [llength $target]
        && [lindex $sourcedir 0] == [lindex $target 0] } {
    set sourcedir [lrange $sourcedir 1 end]
    set target    [lrange $target    1 end]
  }
  # Build link
  set back {}
  if [llength $sourcedir] {set back [lrepeat [llength $sourcedir] ".."]}
  return [file join {*}[concat $back $target]]
}


proc database_add {installdir db} {
  set rootdbfile [file join $installdir ".fixdir"]
  set db [get_link_target $rootdbfile $db]
  if { $db != "" } {
    set found 0
    if [file exists $rootdbfile] {
      set f [open $rootdbfile]
      while {[gets $f line] >= 0} {
        if { [lindex $line 0] == "database" && [lindex $line 1] == $db } {
          set found 1
          break
        }
      }
      catch {close $f}
    }
    if { ! [file exists $rootdbfile] } {
      set f [open $rootdbfile a]
      puts $f [list ignore ".fixdir"]
      catch {close $f}
    }
    if { ! $found } {
      set f [open $rootdbfile a]
      puts $f [list database $db]
      catch {close $f}
    }
  }
}


proc database_del {installdir db} {
  set rootdbfile [file join $installdir ".fixdir"]
  set db [get_link_target $rootdbfile $db]
  if { $db != "" } {
    set found 0
    set f [open $rootdbfile]
    set all_config ""
    while {[gets $f line] >= 0} {
      if { [lindex $line 0] == "database" && [lindex $line 1] == $db } {
      } else {
        set all_config "$all_config$line\n"
      }
    }
    catch {close $f}
    if { ! $found } {
      set f [open $rootdbfile w]
      puts -nonewline $f $all_config
      catch {close $f}
    }
  }
}



switch -exact -- [lindex $argv 0] {



  install -
  link {
    set do_things 1
    for {set i 1} {$i < [llength $argv]} {incr i} {
      set arg [lindex $argv $i]
      switch -exact -- $arg {
        -v      { incr verbose }
        -t      { incr i 1 ; set installdir [file normalize [lindex $argv $i]] }
        -n      { set do_things  0 }
        default { set database   $arg }
      }
    }
    read_database $database
    if $do_things {
      puts "Install:   $database in $installdir"
      database_add $installdir $database
    }
    # Loop through files
    #   sourcefile: the file in the target directory (source of the link)
    #   destfile:   the file in the package (destination of the link)
    dict for {sourcefile v} $files {
      if [dict exists $v link] {
        # For a link: create link sourcefile pointing to destfile
        #   - if neither sourcefile nor destfile exists, skip
        #   - if destfile does not exists: move sourcefile to destfile
        #   - if sourcefile does not exists: create it
        #   - if sourcefile is a link, check it points to the right path
        #   - if sourcefile is a plain file, we can't do anything
        set destfile [dict get $v link]
        set sourcefile_exists [file exists $sourcefile]
        if { ! [file exists $destfile] && ! $sourcefile_exists } {
          continue
        }
        if { ! [file exists $destfile] && $sourcefile_exists } {
          puts "Move:      $sourcefile -> $destfile"
          set sourcefile_exists 0
          if $do_things {
            file mkdir [file dirname $destfile]
            file rename $sourcefile $destfile
          }
        }
        if { ! $sourcefile_exists } {
          set sourcetarget [get_link_target $sourcefile $destfile]
          puts "Create:    $sourcefile -> $sourcetarget"
          if $do_things {
            file mkdir [file dirname $sourcefile]
            file link $sourcefile $sourcetarget
          }
        } elseif { ! [catch {set srctarget [file link $sourcefile]}]} then {
          # We did not catch an error, sourcefile is a link
          set n_srctarget [file normalize [file join [file dirname $sourcefile] $srctarget]]
          if { $n_srctarget != [file normalize $destfile]} {
            puts "Existing:  $sourcefile -> $srctarget"
          }
        } elseif [file exists $sourcefile] {
          # We did catch an eror: it is a plain file
          puts "Existing:  $sourcefile"
        }
      } elseif [dict exists $v copy] {
        # For a copy: copy destfile to sourcefile
        set destfile [dict get $v copy]
        if { ! [file exists $sourcefile] } {
          puts "Copy:      $destfile -> $sourcefile"
          if $do_things {
            file copy [file normalize $destfile] $sourcefile
          }
        }
      }
    }
  }
  
  
  uninstall {
    set do_things 1
    for {set i 1} {$i < [llength $argv]} {incr i} {
      set arg [lindex $argv $i]
      switch -exact -- $arg {
        -v      { incr verbose }
        -t      { incr i 1 ; set installdir [file normalize [lindex $argv $i]] }
        -n      { set do_things  0 }
        default { set database   $arg }
      }
    }
    read_database $database
    # Loop through files
    #   sourcefile: the file in the target directory (source of the link)
    #   destfile:   the file in the package (destination of the link)
    dict for {sourcefile v} $files {
      if [dict exists $v link] {
        # For a link: create link sourcefile pointing to destfile
        #   - if sourcefile does not exists: don't do anything
        #   - if sourcefile is a plain file: don't do anything
        #   - if sourcefile is a link, check it points to the right path
        set destfile [dict get $v link]
        if { ! [file exists $sourcefile] } then {
          puts "Missing:   $sourcefile"
        } elseif { [catch {set srctarget [file link $sourcefile]}]} then {
          # We did catch an eror: it is a plain file
          puts "Leave:     $sourcefile"
        } else {
          # We did not catch an error, sourcefile is a link
          set n_srctarget [file normalize [file join [file dirname $sourcefile] $srctarget]]
          if { $n_srctarget == [file normalize $destfile]} {
            puts "Remove:    $sourcefile -> $srctarget"
            if $do_things {
              file delete $sourcefile
            }
          } else {
            puts "Leave:     $sourcefile -> $srctarget"
          }
        }
      }
    }
    if $do_things {
      puts "Uninstall: $database from $installdir"
      database_del $installdir $database
    }
  }
  
  
  
  clean {
    set do_things 1
    for {set i 1} {$i < [llength $argv]} {incr i} {
      set arg [lindex $argv $i]
      switch -exact -- $arg {
        -v      { incr verbose }
        -t      { incr i 1 ; set installdir [file normalize [lindex $argv $i]] }
        -n      { set do_things  0 }
        default { set database   $arg }
      }
    }
    read_database $database
    dict for {sourcefile v} $files {
      if [dict exists $v noisy] {
        if [file exists $sourcefile] {
          puts $sourcefile
          if $do_things {
            file delete -force -- $sourcefile
          }
        }
      }
    }
  }
  
  
  
  noisy {
    set list_all 0
    for {set i 1} {$i < [llength $argv]} {incr i} {
      set arg [lindex $argv $i]
      switch -exact -- $arg {
        -v      { incr verbose }
        -t      { incr i 1 ; set installdir [file normalize [lindex $argv $i]] }
        -a      { set list_all  1 }
        default { set database  $arg }
      }
    }
    read_database $database
    dict for {sourcefile v} $files {
      if [dict exists $v noisy] {
        if {$list_all || [file exists $sourcefile]} {
          puts $sourcefile
        }
      }
    }
  }
  
  
  
  list {
    set raw 0
    for {set i 1} {$i < [llength $argv]} {incr i} {
      set arg [lindex $argv $i]
      switch -exact -- $arg {
        -v      { incr verbose }
        -t      { incr i 1 ; set installdir [file normalize [lindex $argv $i]] }
        -r      { set raw 1 }
        default { set database  $arg }
      }
    }
    read_database $database
    if $raw {
      puts [list $databases $files]
    } else {
      dict for {dbfile v} $databases {
        puts "Database:  $dbfile"
        dict for {f v2} $v {
          puts "  - $f"
        }
      }
      dict for {sourcefile v} $files {
        if [dict exists $v noisy] {
          puts "Noisy:     $sourcefile"
        }
        if [dict exists $v ignore] {
          puts "Ignore:    $sourcefile"
        }
        if [dict exists $v link] {
          set destfile [dict get $v link]
          set sourcetarget [get_link_target $sourcefile $destfile]
          puts "Link:      $sourcefile -> $sourcetarget"
        }
        if [dict exists $v copy] {
          set destfile [dict get $v copy]
          puts "Copy:      $sourcefile <- $destfile"
        }
      }
    }
  }
  
  
  
  unknown {
    set do_things 1
    for {set i 1} {$i < [llength $argv]} {incr i} {
      set arg [lindex $argv $i]
      switch -exact -- $arg {
        -v      { incr verbose }
        -t      { incr i 1 ; set installdir [file normalize [lindex $argv $i]] }
        default { set database  $arg }
      }
    }
    read_database $database
    set all_files [concat [glob -nocomplain *] [glob -type hidden -nocomplain *]]
    foreach item $all_files {
      if {$item == "." || $item == ".."} { continue }
      if {![dict exists $files $item]} {
        puts $item
      }
    }
  }
  
  
  
  run {
    set do_things 1
    for {set i 1} {$i < [llength $argv]} {incr i} {
      set arg [lindex $argv $i]
      switch -exact -- $arg {
        -v      { incr verbose }
        -t      { incr i 1 ; set installdir [lindex $argv $i] }
        default { set database  $arg }
      }
    }
    read_database $database
  }
  
  
  
  
  default {
    puts "Usage: $argv0 action database ..."
    puts ""
    puts " actions:"
    puts ""
    puts "    help"
    puts "        This help"
    puts ""
    puts "    install \[OPTS\] \[DATABASE\]"
    puts "    link    \[OPTS\] \[DATABASE\]"
    puts "        Create links from the current directory to the directory"
    puts "        of the database of the link files. Add DATABASE to"
    puts "        TARGETDIR/.fixdir"
    puts "        -n  don't do anything"
    puts "        -v  verbose mode"
    puts "        -t  TARGETDIR"
    puts ""
    puts "    uninstall \[OPTS\] \[DATABASE\]"
    puts "        Remove links that belongs to DATABASE from the TARGETDIR."
    puts "        Remove DATABASE from TARGETDIR/.fixdir"
    puts "        -n  don't do anything"
    puts "        -v  verbose mode"
    puts "        -t  TARGETDIR"
    puts ""
    puts "    clean \[OPTS\] \[DATABASE\]"
    puts "        Delete noisy files"
    puts "        -n  only list existing noisy files, like noisy"
    puts "        -v  verbose mode"
    puts "        -t  TARGETDIR"
    puts ""
    puts "    noisy \[OPTS\] \[DATABASE\]"
    puts "        List existing noisy files"
    puts "        -a  list all noisy files, even those that don't exist"
    puts "        -v  verbose mode"
    puts "        -t  TARGETDIR"
    puts ""
    puts "    list \[OPTS\] \[DATABASE\]"
    puts "        List the content of the database"
    puts "        -r  raw"
    puts "        -v  verbose mode"
    puts "        -t  TARGETDIR"
    puts ""
    puts "    unknown \[OPTS\] \[DATABASE\]"
    puts "        List unknown files in the current directory"
    puts "        -v  verbose mode"
    puts "        -t  TARGETDIR"
    puts ""
    puts "    run \[OPTS\] \[DATABASE\]"
    puts "        Only run the database"
    puts "        -v  verbose mode"
    puts "        -t  TARGETDIR"
    puts ""
    puts " database format:"
    puts ""
    puts "    The database is a tcl file with the following available commands:"
    puts ""
    puts "    link A B"
    puts "        make a link from file A (target dir) pointing to B (database"
    puts "        dir)"
    puts ""
    puts "    copy A B"
    puts "        copy the file B from database to A in the target directory"
    puts ""
    puts "    noisy F"
    puts "        declare the file F as noisy (current dir). Noisy files are"
    puts "        those which keep reappearing and you want to clean easily"
    puts "        using the clean command."
    puts ""
    puts "    ignore F"
    puts "        ignore F in all actions. Don't list it in the unknown files."
    puts ""
    puts "    $pkgdir"
    puts "        package directory"
    puts ""
    puts "    $installdir"
    puts "        installation directory"
    puts ""
  }
}


